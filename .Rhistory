library(ncbit)
# Get a fresh version of NCBI taxonomy (may take some time)
ncbi <- ncbit(update = TRUE)
install.packages("curl")
install.packages("curl")
# Get a fresh version of NCBI taxonomy (may take some time)
ncbi <- ncbit(update = TRUE)
# Load ncbit
library(ncbit)
# Get a fresh version of NCBI taxonomy (may take some time)
ncbi <- ncbit(update = TRUE)
# Get a fresh version of NCBI taxonomy (may take some time)
ncbi <- ncbit(update = TRUE)
library(curl)
# Get a fresh version of NCBI taxonomy (may take some time)
ncbi <- ncbit(update = TRUE)
# Load ncbit
library(ncbit)
library(curl)
# Get a fresh version of NCBI taxonomy (may take some time)
ncbi <- ncbit(update = TRUE)
# Install ncbit from CRAN
install.packages("ncbit")
install.packages("ncbit")
# Install taxizedb from CRAN
install.packages("taxizedb")
# Load taxizedb
library(taxizedb)
# Download NCBI taxonomy database (may take some time)
db_download_ncbi()
# Connect to NCBI taxonomy database
ncbi <- src_ncbi()
View(ncbi)
name2taxid("Aeromonas salmonicida")
name2taxid(ncbi_patho$Species, db = "ncbi")
tax_id <- name2taxid(ncbi_patho$Species, db = "ncbi")
ncbi_patho
classification(tax_id)
tax_class_list <- classification(tax_id)
View(tax_class_list)
length(tax_class_list)
1:length(tax_class_list)
citation("taxizedb")
library(dplyr)
tax_patho_complete <- data_frame()
tax_patho_complete <- tibble()
i <- 1
tmp <- tax_class_list[[i]]
tmp
View(tmp)
for (i in 1:length(tax_class_list)) {
tmp <- tax_class_list[[i]]
print(tmp)
}
row.tmp <- tmp %>%
select(name, rank) %>%
tidyr::pivot_wider(., names_from = name)
row.tmp <- tmp %>%
select(name, rank) %>%
tibble::deframe(., name = rank, value = name)
row.tmp <- tmp %>%
select(name, rank)
View(row.tmp)
row.tmp <- tmp %>%
select(rank, name) %>%
tibble::deframe()
row.tmp
row.tmp <- tmp %>%
select(rank, name) %>%
tibble::deframe() %>%
select(superkingdom)
row.tmp <- row.tmp[c("superkingdom", "phylum", "class", "order", "family", "genus", "species")]
row.tmp
tax_patho_complete <- rbind.data.frame(tax_patho_complete, row.tmp)
View(tax_patho_complete)
tax_patho_complete <- tibble()
for (i in 1:length(tax_class_list)) {
tmp <- tax_class_list[[i]]
row.tmp <- tmp %>%
select(rank, name) %>%
tibble::deframe()
row.tmp <- row.tmp[c("superkingdom", "phylum", "class", "order", "family", "genus", "species")]
tax_patho_complete <- rbind.data.frame(tax_patho_complete, row.tmp)
}
View(tax_patho_complete)
tax_class_list[7]
tax_class_list[16]
tax_class_list[15]
colnames(tax_patho_complete) <- c("superkingdom", "phylum", "class", "order", "family", "genus", "species")
View(tax_patho_complete)
is.na(tax_patho_complete$species)
which(is.na(tax_patho_complete$species))
tax_patho_complete[which(is.na(tax_patho_complete$species)),]
tax_class_list[[which(is.na(tax_patho_complete$species))]]
tax_class_list[[6]]
tax_class_list[[7]]
tax_patho_complete[which(is.na(tax_patho_complete$species)),]
#save to file
write.csv(tax_patho_complete)
#save to file
write.csv(tax_patho_complete, file = "patho_ncbi_20230222_taxa.csv")
#save to file
write.csv(tax_patho_complete, file = "patho_ncbi_20230222_taxa.csv", row.names = F)
setwd("//wsl.localhost/Ubuntu/home/kasmanas/mSpreadComp")
library("optparse")
library("dplyr")
library("tidyr")
library("ggplot2")
library("data.table")
library("viridis")
library("pheatmap")
library("forcats")
#target_gene <- "Gene_id"
target_gene <- "Gene_class"
mags_data_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/genome_data_merged.csv")
selected_lib <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/selected_samples.csv")
gene_df <- data.table::fread("test_data/deeparg_df_format_mSpread.csv")
norm_gene_prev_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/gene_prevalence_per_library.csv")
#tax_level <- "Phylum"
out.path <- "test_output"
selected_lib <- as.character(selected_lib$x)
mags_data_df <- mags_data_df %>%
filter(Library %in% selected_lib) %>%
as.data.frame(.)
#REMOVE AFTER DONE!
# remove underscore
mags_data_df[, tax_level] <- gsub("_([[:alpha:]]{1,2})", "", mags_data_df[, tax_level])
tax_level <- "Phylum"
#target_gene <- "Gene_id"
target_gene <- "Gene_class"
#### TEST INPUT ####
mags_data_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/genome_data_merged.csv")
selected_lib <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/selected_samples.csv")
gene_df <- data.table::fread("test_data/deeparg_df_format_mSpread.csv")
norm_gene_prev_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/gene_prevalence_per_library.csv")
tax_level <- "Phylum"
out.path <- "test_output"
#### Process initial load data ####
selected_lib <- as.character(selected_lib$x)
mags_data_df <- mags_data_df %>%
filter(Library %in% selected_lib) %>%
as.data.frame(.)
#REMOVE AFTER DONE!
# remove underscore
mags_data_df[, tax_level] <- gsub("_([[:alpha:]]{1,2})", "", mags_data_df[, tax_level])
gene_df <- gene_df %>%
merge.data.frame(.,
mags_data_df[,c("Library", "Genome", "Target")],
by = "Genome") %>%
filter(Library %in% selected_lib)
norm_gene_prev_df <- norm_gene_prev_df %>%
filter(Library %in% selected_lib)
target_gene_sum_prev <- norm_gene_prev_df %>%
group_by(across(all_of(target_gene))) %>%
summarise(prev_sum = sum(gene.genome.prev)) %>%
tibble::deframe() %>%
sort()
### PARTICULAR FILTERING -> REMOVE AFTER ! ###
# only consider ARGs with 35% or higher percent identity
gene_df <- gene_df[gene_df$identity >= 35, ]
# load best bins to assign taxonomy to clusters
target_classes <- sort(c(unique(gene_df$Target)))
remov.arg_class <- c("oxazolidinone", "aminoglycoside:aminocoumarin", "rifamycin",
"nucleoside", "tetracenomycin_C", "fosfomycin",
"polyamine:peptide")
norm_gene_prev_df <- norm_gene_prev_df %>%
filter(!(get(target_gene) %in% remov.arg_class))
ggplot(norm_gene_prev_df,
aes(x=reorder(get(target_gene), gene.genome.prev), y=gene.genome.prev, fill=Target)) +
geom_boxplot() +
xlab("Target Gene") + ylab("Normalized Target Gene Prevalence per Library") +
theme(axis.text.x = element_text(angle = 45, size=15, hjust=1)) +
theme(legend.text = element_text(size=15))
#### Perform Pairwise analyses
dat <- norm_gene_prev_df
dat <- dat %>%
arrange(Target) %>%
select(Target, all_of(target_gene), gene.genome.prev)
View(dat)
mean_gene_target <- dat %>%
group_by(across(all_of(target_gene)), Target) %>%
summarise(
n = n(),
mean = mean(gene.genome.prev),
sd = sd(gene.genome.prev)
) %>%
ungroup()
View(mean_gene_target)
stat.test <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::t_test(gene.genome.prev ~ Target, p.adjust.method = "bonferroni")
View(stat.test)
# Remove unnecessary columns and display the outputs
stat.test.select <- stat.test %>%
select(-.y., -statistic, -df) %>%
filter(!(p.adj.signif == "ns"))
View(stat.test.select)
graphs <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::doo(
~ggpubr::ggboxplot(
data =., x = "Target", y = "gene.genome.prev",
fill = "Target", legend = "none"
),
result = "plots"
)
variables <- as.character(as.data.frame(graphs)[, target_gene])
plots <- graphs$plots %>% set_names(variables)
plots <- graphs$plots %>% purrr::set_names(variables)
for(variable in variables){
stat.test.i <- filter(stat.test.select, get(target_gene) == variable)
graph.i <- plots[[variable]] +
labs(title = variable) +
ggpubr::stat_pvalue_manual(stat.test.i, label = "p.adj.signif")
#pdf(file = paste0(out.path,"/pairwise_per_gene/boxplot_gene_prev_per_library_", variable, ".pdf"),
#    width = 12, height = 8)
print(graph.i)
#dev.off()
}
graphs <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::doo(
~ggpubr::ggboxplot(
data =., x = "Target", y = "gene.genome.prev",
fill = "Target", legend = "none"
),
result = "plots"
)
variables <- as.character(as.data.frame(graphs)[, target_gene])
plots <- graphs$plots %>% purrr::set_names(variables)
for(variable in variables){
stat.test.i <- filter(stat.test.select, get(target_gene) == variable)
graph.i <- plots[[variable]] +
labs(title = variable) +
ggpubr::stat_pvalue_manual(stat.test.i, label = "p.adj.signif")
#pdf(file = paste0(out.path,"/pairwise_per_gene/boxplot_gene_prev_per_library_", variable, ".pdf"),
#    width = 12, height = 8)
print(graph.i)
#dev.off()
}
variable
stat.test.i <- filter(stat.test.select, get(target_gene) == variable)
View(stat.test.i)
# Create the plot
# myplot <- ggpubr::ggboxplot(
#   dat, x = "Target", y = "gene.genome.prev",
#   fill = "Target", palette = "npg", legend = "none"
# ) +
#   facet_wrap(~get(target_gene))
# # Add statistical test p-values
stat.test.select <- stat.test.select %>% rstatix::add_xy_position(x = "Target")
View(stat.test.select)
graphs <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::doo(
~ggpubr::ggboxplot(
data =., x = "Target", y = "gene.genome.prev",
fill = "Target", legend = "none"
),
result = "plots"
)
variables <- as.character(as.data.frame(graphs)[, target_gene])
plots <- graphs$plots %>% purrr::set_names(variables)
for(variable in variables){
stat.test.i <- filter(stat.test.select, get(target_gene) == variable)
graph.i <- plots[[variable]] +
labs(title = variable) +
ggpubr::stat_pvalue_manual(stat.test.i, label = "p.adj.signif")
#pdf(file = paste0(out.path,"/pairwise_per_gene/boxplot_gene_prev_per_library_", variable, ".pdf"),
#    width = 12, height = 8)
print(graph.i)
#dev.off()
}
View(stat.test.select)
View(stat.test)
##Mean and SD of Target gene prev per Target metadata
write.csv(x = mean_gene_target, file = paste0(out.path, "/gene_prev_mean_per_target.csv"), row.names = F)
##t-test analysis of all pairwise comparisons
write.csv(x = stat.test, file = paste0(out.path, "/gene_per_target_pairwise_comp.csv"), row.names = F)
setwd("//wsl.localhost/Ubuntu/home/kasmanas/mSpreadComp")
library("optparse")
library("dplyr")
library("tidyr")
library("ggplot2")
library("data.table")
library("viridis")
library("pheatmap")
library("forcats")
#target_gene <- "Gene_id"
target_gene <- "Gene_class"
#### TEST INPUT ####
mags_data_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/genome_data_merged.csv")
selected_lib <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/selected_samples.csv")
gene_df <- data.table::fread("test_data/deeparg_df_format_mSpread.csv")
norm_gene_prev_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/gene_prevalence_per_library.csv")
tax_level <- "Phylum"
out.path <- "test_output"
#### Process initial load data ####
selected_lib <- as.character(selected_lib$x)
mags_data_df <- mags_data_df %>%
filter(Library %in% selected_lib) %>%
as.data.frame(.)
#REMOVE AFTER DONE!
# remove underscore
mags_data_df[, tax_level] <- gsub("_([[:alpha:]]{1,2})", "", mags_data_df[, tax_level])
gene_df <- gene_df %>%
merge.data.frame(.,
mags_data_df[,c("Library", "Genome", "Target")],
by = "Genome") %>%
filter(Library %in% selected_lib)
norm_gene_prev_df <- norm_gene_prev_df %>%
filter(Library %in% selected_lib)
target_gene_sum_prev <- norm_gene_prev_df %>%
group_by(across(all_of(target_gene))) %>%
summarise(prev_sum = sum(gene.genome.prev)) %>%
tibble::deframe() %>%
sort()
### PARTICULAR FILTERING -> REMOVE AFTER ! ###
# only consider ARGs with 35% or higher percent identity
gene_df <- gene_df[gene_df$identity >= 35, ]
# load best bins to assign taxonomy to clusters
target_classes <- sort(c(unique(gene_df$Target)))
remov.arg_class <- c("oxazolidinone", "aminoglycoside:aminocoumarin", "rifamycin",
"nucleoside", "tetracenomycin_C", "fosfomycin",
"polyamine:peptide")
norm_gene_prev_df <- norm_gene_prev_df %>%
filter(!(get(target_gene) %in% remov.arg_class))
#######
#Plotting
pdf(file = paste0(out.path,"/box_plot_gene_prevalence_per_library", ".pdf"),
width = 20, height = 11.69)
ggplot(norm_gene_prev_df,
aes(x=reorder(get(target_gene), gene.genome.prev), y=gene.genome.prev, fill=Target)) +
geom_boxplot() +
xlab("Target Gene") + ylab("Normalized Target Gene Prevalence per Library") +
theme(axis.text.x = element_text(angle = 45, size=15, hjust=1)) +
theme(legend.text = element_text(size=15))
dev.off()
#####
#### Perform Pairwise analyses
dat <- norm_gene_prev_df
dat <- dat %>%
arrange(Target) %>%
select(Target, all_of(target_gene), gene.genome.prev)
mean_gene_target <- dat %>%
group_by(across(all_of(target_gene)), Target) %>%
summarise(
n = n(),
mean = mean(gene.genome.prev),
sd = sd(gene.genome.prev)
) %>%
ungroup()
#Do the test
stat.test <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::t_test(gene.genome.prev ~ Target, p.adjust.method = "bonferroni")
# Remove unnecessary columns and display the outputs
stat.test.select <- stat.test %>%
select(-.y., -statistic, -df) %>%
filter(!(p.adj.signif == "ns"))
# Create the plot
# myplot <- ggpubr::ggboxplot(
#   dat, x = "Target", y = "gene.genome.prev",
#   fill = "Target", palette = "npg", legend = "none"
# ) +
#   facet_wrap(~get(target_gene))
# # Add statistical test p-values
stat.test.select <- stat.test.select %>% rstatix::add_xy_position(x = "Target")
# myplot + ggpubr::stat_pvalue_manual(stat.test, label = "p.adj.signif")
#Create individual plots
#palette = c("#F8766D","#A3A500","#00BF7D","#00B0F6","#E76BF3")
graphs <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::doo(
~ggpubr::ggboxplot(
data =., x = "Target", y = "gene.genome.prev",
fill = "Target", legend = "none"
),
result = "plots"
)
#graphs
variables <- as.character(as.data.frame(graphs)[, target_gene])
plots <- graphs$plots %>% purrr::set_names(variables)
for(variable in variables){
stat.test.i <- filter(stat.test.select, get(target_gene) == variable)
graph.i <- plots[[variable]] +
labs(title = variable) +
ggpubr::stat_pvalue_manual(stat.test.i, label = "p.adj.signif")
pdf(file = paste0(out.path,"/pairwise_per_gene/boxplot_gene_prev_per_library_", variable, ".pdf"),
width = 12, height = 8)
print(graph.i)
dev.off()
}
setwd("//wsl.localhost/Ubuntu/home/kasmanas/mSpreadComp")
library("optparse")
library("dplyr")
library("tidyr")
library("ggplot2")
library("data.table")
library("viridis")
library("pheatmap")
library("forcats")
#target_gene <- "Gene_id"
target_gene <- "Gene_class"
#### TEST INPUT ####
mags_data_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/genome_data_merged.csv")
selected_lib <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/selected_samples.csv")
gene_df <- data.table::fread("test_data/deeparg_df_format_mSpread.csv")
norm_gene_prev_df <- data.table::fread("test_output/03_mspread_analysis_gene_class_out/genome_quality_norm/gene_prevalence_per_library.csv")
tax_level <- "Phylum"
out.path <- "test_output"
#### Process initial load data ####
selected_lib <- as.character(selected_lib$x)
mags_data_df <- mags_data_df %>%
filter(Library %in% selected_lib) %>%
as.data.frame(.)
#REMOVE AFTER DONE!
# remove underscore
mags_data_df[, tax_level] <- gsub("_([[:alpha:]]{1,2})", "", mags_data_df[, tax_level])
gene_df <- gene_df %>%
merge.data.frame(.,
mags_data_df[,c("Library", "Genome", "Target")],
by = "Genome") %>%
filter(Library %in% selected_lib)
norm_gene_prev_df <- norm_gene_prev_df %>%
filter(Library %in% selected_lib)
target_gene_sum_prev <- norm_gene_prev_df %>%
group_by(across(all_of(target_gene))) %>%
summarise(prev_sum = sum(gene.genome.prev)) %>%
tibble::deframe() %>%
sort()
### PARTICULAR FILTERING -> REMOVE AFTER ! ###
# only consider ARGs with 35% or higher percent identity
gene_df <- gene_df[gene_df$identity >= 35, ]
# load best bins to assign taxonomy to clusters
target_classes <- sort(c(unique(gene_df$Target)))
remov.arg_class <- c("oxazolidinone", "aminoglycoside:aminocoumarin", "rifamycin",
"nucleoside", "tetracenomycin_C", "fosfomycin",
"polyamine:peptide")
norm_gene_prev_df <- norm_gene_prev_df %>%
filter(!(get(target_gene) %in% remov.arg_class))
#######
#Plotting
pdf(file = paste0(out.path,"/box_plot_gene_prevalence_per_library", ".pdf"),
width = 20, height = 11.69)
ggplot(norm_gene_prev_df,
aes(x=reorder(get(target_gene), gene.genome.prev), y=gene.genome.prev, fill=Target)) +
geom_boxplot() +
xlab("Target Gene") + ylab("Normalized Target Gene Prevalence per Library") +
theme(axis.text.x = element_text(angle = 45, size=15, hjust=1)) +
theme(legend.text = element_text(size=15))
dev.off()
#####
#### Perform Pairwise analyses
dat <- norm_gene_prev_df
dat <- dat %>%
arrange(Target) %>%
select(Target, all_of(target_gene), gene.genome.prev)
mean_gene_target <- dat %>%
group_by(across(all_of(target_gene)), Target) %>%
summarise(
n = n(),
mean = mean(gene.genome.prev),
sd = sd(gene.genome.prev)
) %>%
ungroup()
#Do the test
stat.test <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::t_test(gene.genome.prev ~ Target, p.adjust.method = "bonferroni")
# Remove unnecessary columns and display the outputs
stat.test.select <- stat.test %>%
select(-.y., -statistic, -df) %>%
filter(!(p.adj.signif == "ns"))
# Create the plot
# myplot <- ggpubr::ggboxplot(
#   dat, x = "Target", y = "gene.genome.prev",
#   fill = "Target", palette = "npg", legend = "none"
# ) +
#   facet_wrap(~get(target_gene))
# # Add statistical test p-values
stat.test.select <- stat.test.select %>% rstatix::add_xy_position(x = "Target")
# myplot + ggpubr::stat_pvalue_manual(stat.test, label = "p.adj.signif")
#Create individual plots
#palette = c("#F8766D","#A3A500","#00BF7D","#00B0F6","#E76BF3")
graphs <- dat %>%
group_by(across(all_of(target_gene))) %>%
rstatix::doo(
~ggpubr::ggboxplot(
data =., x = "Target", y = "gene.genome.prev",
fill = "Target", legend = "none"
),
result = "plots"
)
#graphs
variables <- as.character(as.data.frame(graphs)[, target_gene])
plots <- graphs$plots %>% purrr::set_names(variables)
for(variable in variables){
stat.test.i <- filter(stat.test.select, get(target_gene) == variable)
graph.i <- plots[[variable]] +
labs(title = variable) +
ggpubr::stat_pvalue_manual(stat.test.i, label = "p.adj.signif")
pdf(file = paste0(out.path,"/pairwise_per_gene_boxplots/boxplot_gene_prev_per_library_", variable, ".pdf"),
width = 12, height = 8)
print(graph.i)
dev.off()
}
#Save Tables to file
##Mean and SD of Target gene prev per Target metadata
write.csv(x = mean_gene_target, file = paste0(out.path, "/gene_prev_mean_per_target.csv"), row.names = F)
##t-test analysis of all pairwise comparisons
write.csv(x = stat.test, file = paste0(out.path, "/gene_per_target_pairwise_comp.csv"), row.names = F)
